#BlueJ class context
comment0.params=ordnername
comment0.target=Musiksammlung(java.lang.String)
comment0.text=\r\n\ Erzeuge\ eine\ Musiksammlung\r\n\ @param\ ordnername\ der\ Ordner\ mit\ den\ Audiodateien.\r\n
comment1.params=dateiname
comment1.target=void\ dateiHinzufuegen(java.lang.String)
comment1.text=\r\n\ F\u00FCge\ der\ Sammlung\ eine\ Track-Datei\ hinzu.\r\n\ @param\ dateiname\ der\ Dateiname\ des\ hinzuzuf\u00FCgenden\ Tracks.\r\n
comment10.params=t1\ t2
comment10.target=int\ compare(Track,\ Track)
comment11.params=index
comment11.target=void\ entferneTrack(int)
comment11.text=\r\n\ Entferne\ einen\ Track\ aus\ der\ Sammlung.\r\n\ @param\ index\ der\ Index,\ des\ zu\ entfernenden\ Tracks.\r\n
comment12.params=index
comment12.target=boolean\ gueltigerIndex(int)
comment12.text=\r\n\ Stelle\ fest,\ ob\ der\ gegebene\ Index\ f\u00FCr\ die\ Sammlung\ g\u00FCltig\ ist.\r\n\ Falls\ nicht,\ wird\ eine\ Fehlermeldung\ ausgegeben.\r\n\ @param\ index\ der\ zu\ pr\u00FCfende\ Index.\r\n\ @return\ true,\ wenn\ der\ Index\ g\u00FCltig\ ist,\ andernfalls\ false.\r\n
comment13.params=ordnerName
comment13.target=void\ liesBibliothek(java.lang.String)
comment2.params=track
comment2.target=void\ trackHinzufuegen(Track)
comment2.text=\r\n\ F\u00FCge\ der\ Sammlung\ einen\ Track\ hinzu.\r\n\ @param\ dateiname\ der\ hinzuzuf\u00FCgende\ Track.\r\n
comment3.params=index
comment3.target=Track\ gibTrack(int)
comment3.text=\r\n\ Hole\ einen\ Track\ aus\ der\ Sammlung.\r\n\ @param\ index\ der\ Index\ des\ abzuspielenden\ Tracks.\r\n\ @return\ den\ ausgew\u00E4hlten\ Track;\ oder\ null,\ falls\ der\ Track\ nicht\ existiert.\r\n
comment4.params=
comment4.target=int\ gibAnzahlTracks()
comment4.text=\r\n\ Liefere\ die\ Anzahl\ der\ Tracks\ in\ dieser\ Sammlung.\r\n\ @return\ die\ Anzahl\ der\ tracks\ in\ dieser\ Sammlung.\r\n
comment5.params=
comment5.target=java.util.List\ gibAlleTracks()
comment5.text=\r\n\ Liefere\ eine\ Kopie\ aller\ Tracks\ in\ der\ Sammlung.\r\n\ @return\ alle\ Tracks\ in\ der\ Sammlung.\r\n
comment6.params=
comment6.target=java.util.List\ sortiereNachInterpret()
comment6.text=\r\n\ Liefere\ eine\ Liste\ der\ Tracks,\ sortiert\ nach\ den\ Interpreten.\r\n\ @return\ die\ Tracks,\ sortiert\ nach\ Interpreten.\r\n
comment7.params=
comment7.target=java.util.List\ sortiereNachTitel()
comment7.text=\r\n\ Liefere\ eine\ Liste\ der\ Tracks,\ sortiert\ nach\ den\ Titeln.\r\n\ @return\ die\ Tracks,\ sortiert\ nach\ Titel.\r\n
comment8.params=vergleichsobjekt
comment8.target=java.util.List\ sortiereNach(java.util.Comparator)
comment8.text=\r\n\ Liefere\ eine\ sortierte\ Kopie\ der\ Track-Liste.\r\n\ @param\ vergleichsobjekt\ der\ Comparator\ f\u00FCr\ die\ Sortierung.\r\n\ @return\ eine\ sortierte\ Kopie\ der\ Liste.\r\n
comment9.params=feld
comment9.target=java.util.List\ sortiereNachFeld(java.lang.String)
comment9.text=\r\n\ Liefere\ eine\ Liste\ der\ Tracks,\ sortiert\ nach\ dem\ durch\ seinen\ Namen\ angegebenen\ Feld.\r\n\ @param\ feld\ das\ Feld,\ nach\ dem\ sortiert\ werden\ soll,\ z.B.\ Titel,\ Interpret,\ etc.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ @see\ Track.Felder\r\n\ @return\ die\ Tracks,\ sortiert\ nach\ dem\ Feld.\r\n
numComments=14
